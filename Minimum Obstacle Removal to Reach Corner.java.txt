//https://leetcode.com/problems/minimum-obstacle-removal-to-reach-corner/description/?envType=daily-question&envId=2024-11-28

class Solution {
    public int minimumObstacles(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;

        int[][] minObstacles = new int[m][n];
        Arrays.stream(minObstacles).forEach(a -> Arrays.fill(a, (int)1e8));

        int[] dx = new int[]{1, 0, -1, 0};
        int[] dy = new int[]{0, 1, 0, -1};
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> (a[0] - b[0]));
        pq.offer(new int[]{grid[0][0], 0, 0});
        minObstacles[0][0] = grid[0][0];

        while(!pq.isEmpty())
        {
            int [] cur = pq.poll();
            int obstacle = cur[0];
            int row = cur[1];
            int col = cur[2];

            if(row == m - 1 && col == n - 1)
                return obstacle;
            for(int i = 0; i < 4; i++)
            {
                int newRow = row + dx[i];
                int newCol = col + dy[i];
                if(newRow >= 0 && newRow <= m - 1 && newCol >=0 && newCol <= n-1)
                {
                    int newObstacle = obstacle + grid[newRow][newCol];
                    if(newObstacle < minObstacles[newRow][newCol])
                    {
                        minObstacles[newRow][newCol] = newObstacle;
                        pq.offer(new int[]{minObstacles[newRow][newCol], newRow, newCol});
                    }
                }
            }

        }
        return -1;
    }
}